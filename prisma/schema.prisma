// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  posts Post[]
  likes Like[]
  comments Comment[]

  followers Follows[] @relation("follower") // user is followed by other users
  following Follows[] @relation("following") // user is following other users

  notifications Notification[] @relation("userNotifications") // notificaiton received by user
  notificationsCreated Notification[] @relation("notificationCreator") // notificaiton created by user

}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes Like[]
  comments Comment[]
  notifications Notification[]
}

model Comment{
  id String @id @default(cuid())
  authorId String
  postId String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId]) // index for faster queries
}

model Like{
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId])
  @@unique([userId,postId]) // unique constraint to prevent duplicate likes
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower User @relation("follower",fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following",fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId])
  @@unique([followerId,followingId]) // unique constraint to prevent duplicate follows
  @@id([followerId,followingId]) // composite key
}

model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  // Relationships
  user User @relation("userNotifications",fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator",fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

enum NotificationType{
  FOLLOW
  LIKE
  COMMENT
}